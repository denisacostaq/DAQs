dist: xenial

language: cpp

env:
  global:
    - CMAKE_VERSION=3.14.5

matrix:
  fast_finish: true
  include:
    - os: linux
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:mhier/libboost-latest'
            - sourceline: 'ppa:beineri/opt-qt-5.12.2-xenial'
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - boost1.67
            - libprotobuf-dev
            - protobuf-compiler
            - qt512-meta-minimal
            - qt512charts-no-lgpl
            - libgl-dev #required by qtquick
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
        - QT5_CMAKE_MODULES_PATH="/opt/qt512/lib/cmake/Qt5"

    - os: linux
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:mhier/libboost-latest'
            - sourceline: 'ppa:beineri/opt-qt-5.12.2-xenial'
            - llvm-toolchain-xenial-7
          packages:
            - clang-7
            - clang-format-7
            - boost1.67
            - libprotobuf-dev
            - protobuf-compiler
            - qt512-meta-minimal
            - qt512charts-no-lgpl
            - libgl-dev #required by qtquick
      env:
        - MATRIX_EVAL="CC=clang-7 && CXX=clang++-7"
        - QT5_CMAKE_MODULES_PATH="/opt/qt512/lib/cmake/Qt5"

    #On macOS, the version of clang is controlled by the choice of osx_image. You can find here the list of available osx_image
    #https://docs.travis-ci.com/user/languages/c/#clang-on-macos
    #https://docs.travis-ci.com/user/reference/osx/#macos-version
    #https://gist.github.com/yamaya/2924292#file-xcode-clang-vers-L160-L164
    - os: osx
      osx_image: xcode10.1 #clang-10, boost 1.67
      env:
        - MATRIX_EVAL="brew update && brew install protobuf qt5 && CC=clang && CXX=clang++"
        - QT5_CMAKE_MODULES_PATH="brew --prefix qt5"

  allow_failures:
    - os: osx
      osx_image: xcode10.1
      env:
        - MATRIX_EVAL="brew update && brew install protobuf gcc@7 qt5 && CC=gcc-7 && CXX=g++-7"
        - QT5_CMAKE_MODULES_PATH="brew --prefix qt5"

before_install:
  - eval "${MATRIX_EVAL}"
  - mkdir -p 3rdparty/fakeroot;
  - wget --show-progress -qO- https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-$(uname -s)-x86_64.tar.gz | tar xzf - -C 3rdparty/fakeroot;
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then
      export PATH=$(pwd)/3rdparty/fakeroot/cmake-${CMAKE_VERSION}-$(uname -s)-x86_64/bin:$PATH;
    fi
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then wget --show-progress https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -O $(pwd)/3rdparty/fakeroot/sdk-tools-linux-4333796.zip; fi
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then unzip -q $(pwd)/3rdparty/fakeroot/sdk-tools-linux-4333796.zip -d $(pwd)/3rdparty/fakeroot/andoid-sdk; fi
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then ls $(pwd)/3rdparty/fakeroot/andoid-sdk; fi
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then export ANDROID_SDK_HOME=$(pwd)/3rdparty/fakeroot/andoid-sdk; fi
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then wget --show-progress https://dl.google.com/android/repository/android-ndk-r18b-linux-x86_64.zip -O $(pwd)/3rdparty/fakeroot/android-ndk-r18b-linux-x86_64.zip; fi
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then unzip -q $(pwd)/3rdparty/fakeroot/android-ndk-r18b-linux-x86_64.zip -d $(pwd)/3rdparty/fakeroot/andoid-ndk; fi
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then ls $(pwd)/3rdparty/fakeroot/andoid-ndk; fi
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then export ANDROID_NDK_HOME=$(pwd)/3rdparty/fakeroot/andoid-ndk/android-ndk-r18b; fi
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then ${ANDROID_NDK_HOME}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++ --version; fi
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then ${ANDROID_SDK_HOME}/tools/bin/sdkmanager "platforms;android-21"; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
      export PATH=$(pwd)/3rdparty/fakeroot/cmake-${CMAKE_VERSION}-$(uname -s)-x86_64/CMake.app/Contents/bin:$PATH;
      QT5_CMAKE_MODULES_PATH=$(eval "${QT5_CMAKE_MODULES_PATH}")/lib/cmake/Qt5;
    fi

script:
  - mkdir 3rdparty/build
  - pushd 3rdparty/build
  - cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_C_COMPILER=${CC} -DBUILD_TESTING=ON -DQt5_DIR=${QT5_CMAKE_MODULES_PATH} ../../;
  - if [[ ( $TRAVIS_OS_NAME == 'linux' ) && ( $CXX == 'clang++-7' ) ]]; then make check-format; fi
  - make
  - make test
  - popd

notifications:
  email:
    - denisacostaq@gmail.com
